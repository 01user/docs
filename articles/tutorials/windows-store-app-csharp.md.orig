---
title: Using Auth0 with Windows App Store
description: This tutorial explains how to integrate Auth0 with a Windows App Store using the Auth0.Windows8.Cs Nuget package.
---

# Using Auth0 with Windows App Store

This tutorial explains how to integrate Auth0 with a Windows App Store. `Auth0.Windows8.Cs` helps you authenticate users with any [Auth0 supported identity provider](identityproviders).

## Tutorial

### 1. Install Auth0.Windows8.Cs NuGet package

Use the NuGet Package Manager (Tools -> Library Package Manager -> Package Manager Console) to install the Auth0.Windows8.Cs package, running the command:

<pre><code>Install-Package Auth0.Windows8.Cs</pre></code>

### 2. Setting up the callback URL in Auth0

<div class="setup-callback">
<p>Go to the <a href="@@uiAppSettingsURL@@" target="_new">Application Settings</a> section in the Auth0 dashboard and make sure that <strong>Allowed Callback URLs</strong> contains the following value:</p>

<pre><code>https://@@account.namespace@@/mobile</pre></code>
</div>

<<<<<<< HEAD
![](../media/articles/windowsstore-auth0-tutorial/3dmCI.png)
=======
### 3. Integration
There are three options to do the integration:
>>>>>>> Tutorial article collection, saml app config template

1. Using the [Auth0 Login Widget](login-widget2) inside a Web View (this is the simplest with only a few lines of code required).
2. Creating your own UI (more work, but higher control the UI and overall experience).
3. Using specific user name and password.

<<<<<<< HEAD
![](../media/articles/windowsstore-auth0-tutorial/3dmFE.png)
=======
#### Option 1: Authentication using Login Widget
>>>>>>> Tutorial article collection, saml app config template

To start with, we'd recommend using the __Login Widget__. Here is a snippet of code to copy & paste on your project.
Since we are using `await` (.NET 4.5 or greater), your method needs to be `async`:

<<<<<<< HEAD
![](../media/articles/windowsstore-auth0-tutorial/3drhv.png)
=======
```csharp
using Auth0.SDK;
>>>>>>> Tutorial article collection, saml app config template

var auth0 = new Auth0Client(
	"@@account.namespace@@",
	"@@account.clientId@@");

<<<<<<< HEAD
## Build the Windows Store App

###1. Open Visual Studio 2012 and create a new blank Windows Store App:

![](../media/articles/windowsstore-auth0-tutorial/3doIO.png)

###2. Add a basic UI to the app

Open the `MainPage.xaml` file and drop a `Button` control from the Toolbox:

![](../media/articles/windowsstore-auth0-tutorial/3iwYD.png)

###3. Add an Auth0Client class

This class will encapsulate all access to Auth0. Add a new class named `Auth0Client` to the project:

![](../media/articles/windowsstore-auth0-tutorial/3dpIT.png)

Make the class public, and add the following properties and a constructor:

```cs
	public class Auth0Client
	{
		private string Tenant { get; set; }
        private string ClientId { get; set; }
        private string Callback { get; set; }

        public string AuthenticationToken { get; set; }
        public string AccessToken { get; set; }

        public Auth0Client(string tenant, string clientId, string callback)
        {
            this.Tenant = tenant;
            this.ClientId = clientId;
            this.Callback = callback;
        }
    }
```

Add a __LoginAsync__ method:

```cs
    public async Task<string> LoginAsync()
    {
        var auth0Url = string.Format("https://{0}.auth0.com/login?client={1}&redirect_uri={2}&response_type=token&scope=openid",
                            this.Tenant, this.ClientId, this.Callback);

        var result = await WebAuthenticationBroker.AuthenticateAsync(WebAuthenticationOptions.None, new Uri(auth0Url), new Uri(this.Callback)).AsTask();

        if (result.ResponseStatus == WebAuthenticationStatus.Success)
        {
            var tokens = parseResult(result.ResponseData);

            this.AuthenticationToken = tokens["id_token"];
            this.AccessToken = tokens["access_token"];

            return this.AccessToken;
        }

        return null;
    }
```

And then add this helper method to extract the `tokens`:

```cs
    private static Dictionary<string, string> parseResult(string result)
    {
        Dictionary<string, string> tokens = new Dictionary<string, string>();

        //result will be: https://callback#id_token=1234&access_token=12345&...
        var strTokens = result.Split('#')[1].Split('&');

        foreach (var t in strTokens)
        {
            var tok = t.Split('=');
            tokens.Add(tok[0], tok[1]);
        }

        return tokens;
    }
=======
var user = await auth0.LoginAsync();
/*
    Use this object to do wonderful things, e.g.:
      - get user email => user.Profile["email"].ToString()
      - get facebook/google/twitter/etc access token => user.Profile["identities"][0]["access_token"]
      - get Windows Azure AD groups => user.Profile["groups"]
      - etc.
*/
>>>>>>> Tutorial article collection, saml app config template
```

![](//cdn.auth0.com/docs/img/win8-cs-step1.png)

#### Option 2: Authentication with your own UI

If you know which identity provider you want to use, you can add a `connection` parameter and the user will be sent straight to the specified `connection`:

```csharp
var user = await auth0.LoginAsync("auth0waadtests.onmicrosoft.com")' // connection name here
```

<<<<<<< HEAD
Replace __{YOUR TENANT NAME}__ with the name you used when you created the account with Auth0. And __{YOUR CLIENT ID}__ with the `clientId` value you can get from your settings page:

![](../media/articles/windowsstore-auth0-tutorial/3dqSy.png)

###5. Compile and test the application:

When you run the application you will see the Login Screen with the __Auth0 Login Widget__:

![](../media/articles/windowsstore-auth0-tutorial/3drsI.png)

It will show "Google" as an option to authenticate. Place a breakpoint in the `var token=ts.Result` line and complete authentication. If everything is successful, you will see the `access_token`.

###6. Enable other identity providers

Go back to [Auth0](https://app.auth0.com) and select __Connections__, __Social__:

![](../media/articles/windowsstore-auth0-tutorial/3drDu.png)

Enable any of the providers available by clicking on the `Disabled` button.

Run the app again and you will see the providers you just enabled on the login screen:

![](../media/articles/windowsstore-auth0-tutorial/3drIj.png)

###7. Getting user attributes

Open the `MainPage.xaml` file and drop a `TextBox` control from the Toolbox after the `Button`, name it `UserInfo`, clean `Text` and set `IsReadOnly` to `true`:

![](../media/articles/windowsstore-auth0-tutorial/windowsstore-step7.1.png)

Open the `Auth0Client.cs` file and add the __GetUserInfoAsync__ method:

```cs

public async Task<string> GetUserInfoAsync()
{
    var userInfoUrl = string.Format("https://{0}.auth0.com/userinfo?access_token={1}", this.Tenant, this.AccessToken);
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(userInfoUrl);

    string result = null;
    using (WebResponse response = await request.GetResponseAsync())
    using (Stream responseStream = response.GetResponseStream())
    using (StreamReader reader = new StreamReader(responseStream))
    {
        result = reader.ReadToEnd();
    }

    return result;
}
=======
> connection names can be found on Auth0 dashboard. E.g.: `facebook`, `linkedin`, `somegoogleapps.com`, `saml-protocol-connection`, etc.

#### Option 3: Authentication with specific user name and password (only for providers that support this)

```csharp
var user = await auth0.LoginAsync(
	"my-db-connection", 	// connection name here
	"username",
	"password");
>>>>>>> Tutorial article collection, saml app config template
```

#### Scope

Optionally you can specify the `scope` parameter. There are two possible values for scope today:

* __scope: "openid"__ _(default)_ - It will return, not only the `access_token`, but also an `id_token` which is a Json Web Token (JWT). The JWT will only contain the user id.
* __scope: "openid profile"__ - If you want the entire user profile to be part of the `id_token`.

## Accessing user information

The `Auth0User` has the following properties:

* `Profile`: returns a `Newtonsoft.Json.Linq.JObject` object (from [Json.NET component](http://components.xamarin.com/view/json.net/)) containing all available user attributes (e.g.: `user.Profile["email"].ToString()`).
* `IdToken`: is a Json Web Token (JWT) containing all of the user attributes and it is signed with your client secret. This is useful to call your APIs and flow the user identity.
* `Auth0AccessToken`: the `access_token` that can be used to access Auth0's API. You would use this for example to [link user accounts](link-accounts).

<<<<<<< HEAD
![](../media/articles/windowsstore-auth0-tutorial/windowsstore-step7.png)
=======
>>>>>>> Tutorial article collection, saml app config template

**Congratulations!**
